setwd("C:/Users/Tanvi/Desktop/predicting-a-pulsar-star")
getwd()
pulsar_data <- read.csv("pulsar_stars.csv")
head(pulsar_data)
summary(pulsar_data)
#Splitting the data into train and test
index <- sample(nrow(pulsar_data), nrow(pulsar_data)*0.80)
trainData = pulsar_data[index,]
testData = pulsar_data[-index,]
names(pulsar_data)
pulsar_model1 <- glm(trainData$target_class ~ trainData$Mean.of.the.integrated.profile+
trainData$Standard.deviation.of.the.integrated.profile+
trainData$Excess.kurtosis.of.the.integrated.profile+
trainData$Skewness.of.the.integrated.profile+
trainData$Mean.of.the.DM.SNR.curve+
trainData$Standard.deviation.of.the.DM.SNR.curve+
trainData$Excess.kurtosis.of.the.DM.SNR.curve+
trainData$Skewness.of.the.DM.SNR.curve, data = trainData, family = "binomial")
summary(pulsar_model1)
#Eliminating Excessive kurtosis of the DM SNR curve and Skewness of the DM SNR curve
pulsar_model2 <- glm(trainData$target_class ~ trainData$Mean.of.the.integrated.profile+
trainData$Standard.deviation.of.the.integrated.profile+
trainData$Excess.kurtosis.of.the.integrated.profile+
trainData$Skewness.of.the.integrated.profile+
trainDataMean.of.the.DM.SNR.curve+
trainData$Standard.deviation.of.the.DM.SNR.curve, data = trainData, family = "binomial")
summary(pulsar_model2)
pred_prob = predict(pulsar_model2, trainData, type = "response")
pred_value = 1*(pred_prob>0.5)
cbind(trainData, pred_prob, pred_value)
pulsar_model2 <- glm(trainData$target_class ~ trainData$Mean.of.the.integrated.profile+
trainData$Standard.deviation.of.the.integrated.profile+
trainData$Excess.kurtosis.of.the.integrated.profile+
trainData$Skewness.of.the.integrated.profile+
trainData$Mean.of.the.DM.SNR.curve+
trainData$Standard.deviation.of.the.DM.SNR.curve, data = trainData, family = "binomial")
summary(pulsar_model2)
pred_prob = predict(pulsar_model2, trainData, type = "response")
pred_value = 1*(pred_prob>0.5)
cbind(trainData, pred_prob, pred_value)
actual_value = trainData$target_class
confusion_matrix = table(actual_value, pred_value)
confusion_matrix
misclassification_error_rate=1-sum(diag(confusion_matrix))/sum(confusion_matrix)
misclassification_error_rate
is_pulsar = pred_prob[trainData$target_class == '1']
is_not_pulsar = pred_prob[trainData$target_class == '0']
pr = pr.curve(deposit_yes,deposit_no, curve = T)
pr = pr.curve(is_pulsar,is_not_pulsar, curve = T)
pr
plot(pr)
plot(pr)
pr = pr.curve(is_pulsar,is_not_pulsar, curve = T)
plot(pr)
is_pulsar
pr = pr.curve(is_pulsar,is_not_pulsar, curve = T)
library(PRROC)
pr = pr.curve(is_pulsar,is_not_pulsar, curve = T)
plot(pr)
pred_prob_test = predict(pulsar_model2, testData, type = "response")
pred_value_test = 1*(pred_prob_test>0.5)
cbind(testData, pred_prob_test, pred_value_test)
pred_prob_test = predict(pulsar_model2, testData, type = "response")
dim(testData)
pred_prob_tst = predict(pulsar_model2, testData, type = "response")
pred_value_tst = 1*(pred_prob_tst>0.5)
cbind(trainData, pred_prob_tst, pred_value_tst)
actual_value_tst = testData$target_class
confusion_matrix_tst = table(actual_value_tst, pred_value_tst)
confusion_matrix_tst
actual_value_tst = testData$target_class
confusion_matrix_tst = table(actual_value_tst, pred_value_tst)
actual_value2 = testData$target_class
confusion_matrix2 = table(actual_value2, pred_value_tst)
confusion_matrix2
actual_value2 = testData$target_class
confusion_matrix2 = table(actual_value2, pred_value_tst)
len(actual_value_tst)
lengths(actual_value_tst)
size(actual_value2)
dim(testData)
pred_prob_tst = predict(pulsar_model2, testData, type = "response")
pred_value_tst = 1*(pred_prob_tst>0.5)
cbind(trainData, pred_prob_tst, pred_value_tst)
setwd("C:/Users/Tanvi/Desktop/predicting-a-pulsar-star")
getwd()
pulsar_data <- read.csv("pulsar_stars.csv")
head(pulsar_data)
summary(pulsar_data)
#Splitting the data into train and test
index <- sample(nrow(pulsar_data), nrow(pulsar_data)*0.80)
trainData = pulsar_data[index,]
testData = pulsar_data[-index,]
names(pulsar_data)
pulsar_model1 <- glm(trainData$target_class ~ trainData$Mean.of.the.integrated.profile+
trainData$Standard.deviation.of.the.integrated.profile+
trainData$Excess.kurtosis.of.the.integrated.profile+
trainData$Skewness.of.the.integrated.profile+
trainData$Mean.of.the.DM.SNR.curve+
trainData$Standard.deviation.of.the.DM.SNR.curve+
trainData$Excess.kurtosis.of.the.DM.SNR.curve+
trainData$Skewness.of.the.DM.SNR.curve, data = trainData, family = "binomial")
summary(pulsar_model1)
#Eliminating Excessive kurtosis of the DM SNR curve and Skewness of the DM SNR curve
pulsar_model2 <- glm(trainData$target_class ~ trainData$Mean.of.the.integrated.profile+
trainData$Standard.deviation.of.the.integrated.profile+
trainData$Excess.kurtosis.of.the.integrated.profile+
trainData$Skewness.of.the.integrated.profile+
trainData$Mean.of.the.DM.SNR.curve+
trainData$Standard.deviation.of.the.DM.SNR.curve, data = trainData, family = "binomial")
summary(pulsar_model2)
pred_prob = predict(pulsar_model2, trainData, type = "response")
pred_value = 1*(pred_prob>0.5)
cbind(trainData, pred_prob, pred_value)
#Creating a confusion matrix
actual_value = trainData$target_class
confusion_matrix = table(actual_value, pred_value)
confusion_matrix
#Calculating misclassification Error rate
misclassification_error_rate=1-sum(diag(confusion_matrix))/sum(confusion_matrix)
misclassification_error_rate
is_pulsar = pred_prob[trainData$target_class == '1']
is_not_pulsar = pred_prob[trainData$target_class == '0']
library(PRROC)
pr = pr.curve(is_pulsar,is_not_pulsar, curve = T)
plot(pr)
#Working with test data
dim(testData)
dim(trainData)
pred_prob_test = predict(pulsar_model2, testData, type = "response")
pred_value_test = 1*(pred_prob_test>0.5)
cbind(testData, pred_prob_test, pred_value_test)
ppt = predict(pulsar_model2, testData, type = "response")
ppt = predict(pulsar_model2, testData, type = "response")
pvt = 1*(ppt>0.5)
cbind(testData, ppt, pvt)
ppt = predict(pulsar_model2, testData, type = "response")
head(pulsar_data)
summary(pulsar_data)
summary(pulsar_model1)
summary(pulsar_model2)
confusion_matrix
misclassification_error_rate
ppt = predict(pulsar_model2, testData, type = "response")
pulsar_model2 <- glm(target_class ~ Mean.of.the.integrated.profile+
Standard.deviation.of.the.integrated.profile+
Excess.kurtosis.of.the.integrated.profile+
Skewness.of.the.integrated.profile+
Mean.of.the.DM.SNR.curve+
Standard.deviation.of.the.DM.SNR.curve, data = trainData, family = "binomial")
ppt = predict(pulsar_model2, testData, type = "response")
pvt = 1*(ppt>0.5)
cbind(testData, ppt, pvt)
ppt = predict(pulsar_model2, testData, type = "response")
pvt = 1*(ppt>0.5)
cbind(testData, ppt, pvt)
actual_value_test = testData$target_class
confusion_matrix_test = table(actual_value, pvt)
confusion_matrix_test
actual_value_test = testData$target_class
confusion_matrix_test = table(actual_value_test, pvt)
confusion_matrix_test
misclassification_error_rate_test=1-sum(diag(confusion_matrix_test))/sum(confusion_matrix_test)
misclassification_error_rate_test
is_pulsar_test = ppt[testData$target_class == '1']
is_not_pulsar_test = ppt[trainData$target_class == '0']
pr_test = pr.curve(is_pulsar_test,is_not_pulsar_test, curve = T)
plot(pr_test)
pr_test = pr.curve(is_pulsar_test,is_not_pulsar_test, curve = T)
pr_test = pr.curve(is_pulsar_test,is_not_pulsar_test, curve = T) & !is.na(is_not_pulsar)
is_pulsar_test = ppt[testData$target_class == '1'] & !is.na(testData)
vif(pulsar_model2)
library(car)
vif(pulsar_model2)
pulsar_cor <- cor(pulsar_data)
corrplot(pulsar_cor, method = "number")
library(corrplot)
library(corrplot)
install.packages("corrplot")
library(corrplot)
orrplot(pulsar_cor, method = "number")
corrplot(pulsar_cor, method = "number")
pulsar_model3 <- glm(target_class ~ Mean.of.the.integrated.profile+
Standard.deviation.of.the.integrated.profile+
Skewness.of.the.integrated.profile+
Mean.of.the.DM.SNR.curve+
Standard.deviation.of.the.DM.SNR.curve, data = trainData, family = "binomial")
summary(pulsar_model3)
pr_test = pr.curve(is_pulsar_test,is_not_pulsar_test, curve = T)
is.na(testData)
sum(is.na(testData))
pr_test = pr.curve(is_pulsar_test,is_not_pulsar_test, curve = T)
is_pulsar_test
is_not_pulsar_test
pr_test = pr.curve(is_pulsar_test,is_not_pulsar_test, curve = T)
is_pulsar_test = ppt[testData$target_class == '1']
is_not_pulsar_test = ppt[testData$target_class == '0']
pr_test = pr.curve(is_pulsar_test,is_not_pulsar_test, curve = T)
pr_test
plot(pr_test)
